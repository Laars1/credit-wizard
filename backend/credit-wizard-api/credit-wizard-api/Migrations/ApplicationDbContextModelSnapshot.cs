// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using credit_wizard_api.Models;

#nullable disable

namespace credit_wizard_api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("88fb78eb-7c6e-4d97-a8f9-8300cad558c5"),
                            RoleId = new Guid("4c01b50b-3ece-4cdd-9e2e-a3594c14e928")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("credit_wizard_api.Models.Degree", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Degrees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b6feabb-8f23-4c91-83d2-1c9b8df465ce"),
                            Description = "This degree program is designed to equip students with a blend of business and IT skills, focusing on areas such as business strategy, data analysis, and software development. Graduates are prepared for careers in a variety of industries where technology plays a critical role in business operations.",
                            Name = "Bachelor of Science in Business Information Technology"
                        });
                });

            modelBuilder.Entity("credit_wizard_api.Models.DegreeModul", b =>
                {
                    b.Property<Guid>("ModulId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DegreeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRequried")
                        .HasColumnType("bit");

                    b.HasKey("ModulId", "DegreeId");

                    b.HasIndex("DegreeId");

                    b.ToTable("DegreeModul");

                    b.HasData(
                        new
                        {
                            ModulId = new Guid("f8ccaae7-014d-4ba7-8c24-4249be07b1c1"),
                            DegreeId = new Guid("4b6feabb-8f23-4c91-83d2-1c9b8df465ce"),
                            IsRequried = true
                        },
                        new
                        {
                            ModulId = new Guid("b5ed5a5d-21c3-43de-8fb9-9d3a3b99a30f"),
                            DegreeId = new Guid("4b6feabb-8f23-4c91-83d2-1c9b8df465ce"),
                            IsRequried = true
                        },
                        new
                        {
                            ModulId = new Guid("6c381c6f-9d9a-4b69-aa13-33a8a94a1277"),
                            DegreeId = new Guid("4b6feabb-8f23-4c91-83d2-1c9b8df465ce"),
                            IsRequried = true
                        },
                        new
                        {
                            ModulId = new Guid("e0a6f205-64b7-42ab-bce3-39f0b3841c71"),
                            DegreeId = new Guid("4b6feabb-8f23-4c91-83d2-1c9b8df465ce"),
                            IsRequried = true
                        },
                        new
                        {
                            ModulId = new Guid("480cc771-16a7-4176-8c2b-9a73c1df7b34"),
                            DegreeId = new Guid("4b6feabb-8f23-4c91-83d2-1c9b8df465ce"),
                            IsRequried = true
                        },
                        new
                        {
                            ModulId = new Guid("8f0680b7-68c2-4157-aafc-78c72f63a16f"),
                            DegreeId = new Guid("4b6feabb-8f23-4c91-83d2-1c9b8df465ce"),
                            IsRequried = true
                        },
                        new
                        {
                            ModulId = new Guid("b7d16d9e-7a6a-4c11-bcca-4a4c3d4ec864"),
                            DegreeId = new Guid("4b6feabb-8f23-4c91-83d2-1c9b8df465ce"),
                            IsRequried = true
                        },
                        new
                        {
                            ModulId = new Guid("686e6a0c-7f51-4c9d-b968-f6ba201df221"),
                            DegreeId = new Guid("4b6feabb-8f23-4c91-83d2-1c9b8df465ce"),
                            IsRequried = true
                        },
                        new
                        {
                            ModulId = new Guid("6cb76b54-5f27-4b6d-936d-8f6d7b77ce68"),
                            DegreeId = new Guid("4b6feabb-8f23-4c91-83d2-1c9b8df465ce"),
                            IsRequried = true
                        },
                        new
                        {
                            ModulId = new Guid("2aa07a0c-7f51-4c9d-b968-f6ba201df221"),
                            DegreeId = new Guid("4b6feabb-8f23-4c91-83d2-1c9b8df465ce"),
                            IsRequried = true
                        },
                        new
                        {
                            ModulId = new Guid("eb2dbecc-d0d6-44ef-82eb-34284633ef19"),
                            DegreeId = new Guid("4b6feabb-8f23-4c91-83d2-1c9b8df465ce"),
                            IsRequried = false
                        },
                        new
                        {
                            ModulId = new Guid("7eaf3d1c-f214-4115-892b-8e1f1675897b"),
                            DegreeId = new Guid("4b6feabb-8f23-4c91-83d2-1c9b8df465ce"),
                            IsRequried = false
                        },
                        new
                        {
                            ModulId = new Guid("19b1c514-fb71-414a-8e0a-1f708e1e136e"),
                            DegreeId = new Guid("4b6feabb-8f23-4c91-83d2-1c9b8df465ce"),
                            IsRequried = false
                        });
                });

            modelBuilder.Entity("credit_wizard_api.Models.Modul", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Abbreviation")
                        .IsUnique();

                    b.ToTable("Moduls");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f8ccaae7-014d-4ba7-8c24-4249be07b1c1"),
                            Abbreviation = "WACC",
                            Description = "An overview of financial accounting principles and practices.",
                            Name = "Accounting"
                        },
                        new
                        {
                            Id = new Guid("b5ed5a5d-21c3-43de-8fb9-9d3a3b99a30f"),
                            Abbreviation = "WBIS",
                            Description = "An introduction to the role of information systems in modern organizations.",
                            Name = "Business Information Systems"
                        },
                        new
                        {
                            Id = new Guid("6c381c6f-9d9a-4b69-aa13-33a8a94a1277"),
                            Abbreviation = "WBWL",
                            Description = "Eine Einführung in die Betriebswirtschaftslehre.",
                            Name = "Grundlagen BWL"
                        },
                        new
                        {
                            Id = new Guid("e0a6f205-64b7-42ab-bce3-39f0b3841c71"),
                            Abbreviation = "WDDA",
                            Description = "Eine Einführung in die Verwaltung und Analyse von Daten.",
                            Name = "Datenmanagement & Datenanalyse"
                        },
                        new
                        {
                            Id = new Guid("480cc771-16a7-4176-8c2b-9a73c1df7b34"),
                            Abbreviation = "WDEN",
                            Description = "An exploration of the impact of digital technologies on business operations.",
                            Name = "Digital Enterprise"
                        },
                        new
                        {
                            Id = new Guid("8f0680b7-68c2-4157-aafc-78c72f63a16f"),
                            Abbreviation = "WENG",
                            Description = "Developing proficiency in the English language for business communication.",
                            Name = "English"
                        },
                        new
                        {
                            Id = new Guid("b7d16d9e-7a6a-4c11-bcca-4a4c3d4ec864"),
                            Abbreviation = "WGWI",
                            Description = "Introduction to the basics of business informatics.",
                            Name = "Grundlagen WI"
                        },
                        new
                        {
                            Id = new Guid("686e6a0c-7f51-4c9d-b968-f6ba201df221"),
                            Abbreviation = "WKOM",
                            Description = "Effective communication in a business environment.",
                            Name = "Kommunikation"
                        },
                        new
                        {
                            Id = new Guid("6cb76b54-5f27-4b6d-936d-8f6d7b77ce68"),
                            Abbreviation = "WPR1",
                            Description = "Managing projects from start to finish with an emphasis on planning, execution, and control.",
                            Name = "Projektmanagement"
                        },
                        new
                        {
                            Id = new Guid("2aa07a0c-7f51-4c9d-b968-f6ba201df221"),
                            Abbreviation = "BBCS",
                            Description = "Analysis and evaluation of real-world business cases to gain insights and develop problem-solving skills.",
                            Name = "Business Case Studies"
                        },
                        new
                        {
                            Id = new Guid("eb2dbecc-d0d6-44ef-82eb-34284633ef19"),
                            Abbreviation = "WIEN",
                            Description = "Innovation is the process of developing new ideas, products, services, or processes that create value for customers. ntrepreneurship is the process of creating or starting a new business venture in order to make a profit.",
                            Name = "Innovation & Entrepreneurship"
                        },
                        new
                        {
                            Id = new Guid("7eaf3d1c-f214-4115-892b-8e1f1675897b"),
                            Abbreviation = "WDDD",
                            Description = "Domain Driven Design is an approach to software development that focuses on understanding and modeling the business domain of an application.",
                            Name = "Domain Driven Design"
                        },
                        new
                        {
                            Id = new Guid("19b1c514-fb71-414a-8e0a-1f708e1e136e"),
                            Abbreviation = "WWEN",
                            Description = "Web engineering is the process of designing, developing, testing, and maintaining web applications.",
                            Name = "Web Engineering"
                        });
                });

            modelBuilder.Entity("credit_wizard_api.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c01b50b-3ece-4cdd-9e2e-a3594c14e928"),
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("dcbcfcf5-69e7-430b-ae93-7611aa3ee7bb"),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("credit_wizard_api.Models.Semester", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Semesters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7879d617-ca43-482e-9377-fbd55e2976fa"),
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("26082676-ac5f-4a34-bfea-cebba3889b1f"),
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("189a7100-1e13-458c-bda4-c9fcbab360fd"),
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("8c9c8f1e-8484-4d4c-b61e-c7cc905cc1b1"),
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("addcfd52-30f3-48f4-8e2d-ab7ee149eacf"),
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("185fc9bd-3b34-4ebc-811e-87023698eed0"),
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("f3f42629-056e-49de-abc9-59948ccf9ee6"),
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("78273aa4-0b1f-4dcd-9b6b-d9bf464dae39"),
                            Number = 8
                        });
                });

            modelBuilder.Entity("credit_wizard_api.Models.SemesterPlanner", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SemesterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Grade")
                        .HasColumnType("float");

                    b.Property<Guid>("ModulId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "SemesterId");

                    b.HasIndex("ModulId");

                    b.HasIndex("SemesterId");

                    b.ToTable("SemesterPlanners");
                });

            modelBuilder.Entity("credit_wizard_api.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MatriculationNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("88fb78eb-7c6e-4d97-a8f9-8300cad558c5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6c8be4fd-8f7c-4859-ba99-68fe05891cf7",
                            Email = "hans.mustermann@email.ch",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            MatriculationNumber = "11-111-11",
                            NormalizedEmail = "HANS.MUSTERMANN@EMAIL.CH",
                            NormalizedUserName = "HANS.MUSTERMANN@EMAIL.CH",
                            PasswordHash = "AQAAAAIAAYagAAAAEPFATJDrJJBgRADtkAU1hq+QfpyJgkFHAXWhWYL1IjSRygkBSxoPpU7bXxq1C3TRWw==",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "hans.mustermann@email.ch"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("credit_wizard_api.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("credit_wizard_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("credit_wizard_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("credit_wizard_api.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("credit_wizard_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("credit_wizard_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("credit_wizard_api.Models.DegreeModul", b =>
                {
                    b.HasOne("credit_wizard_api.Models.Degree", "Degree")
                        .WithMany("DegreeModuls")
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("credit_wizard_api.Models.Modul", "Modul")
                        .WithMany("DegreeModuls")
                        .HasForeignKey("ModulId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Degree");

                    b.Navigation("Modul");
                });

            modelBuilder.Entity("credit_wizard_api.Models.SemesterPlanner", b =>
                {
                    b.HasOne("credit_wizard_api.Models.Modul", "Modul")
                        .WithMany("SemesterPlanners")
                        .HasForeignKey("ModulId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("credit_wizard_api.Models.Semester", "Semester")
                        .WithMany("SemesterPlanners")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("credit_wizard_api.Models.User", "User")
                        .WithMany("SemesterPlanners")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modul");

                    b.Navigation("Semester");

                    b.Navigation("User");
                });

            modelBuilder.Entity("credit_wizard_api.Models.Degree", b =>
                {
                    b.Navigation("DegreeModuls");
                });

            modelBuilder.Entity("credit_wizard_api.Models.Modul", b =>
                {
                    b.Navigation("DegreeModuls");

                    b.Navigation("SemesterPlanners");
                });

            modelBuilder.Entity("credit_wizard_api.Models.Semester", b =>
                {
                    b.Navigation("SemesterPlanners");
                });

            modelBuilder.Entity("credit_wizard_api.Models.User", b =>
                {
                    b.Navigation("SemesterPlanners");
                });
#pragma warning restore 612, 618
        }
    }
}
